import streamlit as st
import pandas as pd
import datetime
from google.oauth2.service_account import Credentials
import gspread

# --- ConfiguraÃ§Ã£o Inicial ---
# Define o tÃ­tulo da pÃ¡gina e o layout para a aplicaÃ§Ã£o Streamlit.
st.set_page_config(page_title="Vulcano App", layout="wide")

# --- FunÃ§Ã£o de ConexÃ£o ao Google Sheets ---
# Estabelece uma conexÃ£o com o Google Sheets usando credenciais de conta de serviÃ§o.
# O objeto 'st.secrets' Ã© usado para acessar com seguranÃ§a as credenciais configuradas no Streamlit.
@st.cache_resource(ttl=3600) # Armazena o objeto de conexÃ£o em cache por 1 hora para evitar reautenticaÃ§Ã£o
def conectar_google_sheets():
    try:
        # Define o escopo para o acesso Ã  API do Google Sheets.
        scope = ["https://www.googleapis.com/auth/spreadsheets"]
        # Carrega as credenciais a partir dos segredos do Streamlit.
        # As credenciais estÃ£o no nÃ­vel raiz de 'st.secrets'.
        creds = Credentials.from_service_account_info(st.secrets, scopes=scope)
        # Autoriza o cliente gspread com as credenciais carregadas.
        client = gspread.authorize(creds)
        # Abre a planilha especÃ­fica pela sua chave (ID) e seleciona a primeira aba.
        # Certifique-se de que o ID da planilha estÃ¡ configurado corretamente nos seus segredos do Streamlit ou diretamente aqui.
        sheet = client.open_by_key("1dYXXL7d_MJVaDPnmOb6sBECemaVz7-2VXsRBMsxf77U").sheet1
        return sheet
    except Exception as e:
        # Exibe uma mensagem de erro se a conexÃ£o falhar e interrompe a execuÃ§Ã£o da aplicaÃ§Ã£o Streamlit.
        st.error(f"Erro na conexÃ£o com o Google Sheets: {str(e)}")
        st.stop()

# --- FunÃ§Ãµes Auxiliares ---

# Formata um valor numÃ©rico para o formato de moeda brasileira (R$) ou de quantidade.
# O flag 'is_quantidade' determina se Ã© uma quantidade (3 casas decimais) ou moeda (2 casas decimais).
def formatar_br(valor, is_quantidade=False):
    try:
        # Converte o valor para float e trata potenciais problemas de formataÃ§Ã£o (ex: entrada nÃ£o numÃ©rica).
        float_valor = float(valor)
        if is_quantidade:
            # Formata como quantidade com 3 casas decimais, usando vÃ­rgula como separador decimal e ponto como separador de milhar.
            # O truque de 'X' Ã© usado para evitar conflitos na substituiÃ§Ã£o de ponto e vÃ­rgula.
            return f"{float_valor:,.3f}".replace(",", "X").replace(".", ",").replace("X", ".")
        else:
            # Formata como moeda com 2 casas decimais, usando vÃ­rgula como separador decimal e ponto como separador de milhar.
            return f"R$ {float_valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    except (ValueError, TypeError):
        # Retorna o valor original se a formataÃ§Ã£o falhar (ex: se o valor nÃ£o for um nÃºmero).
        return valor

# Converte um valor para float, tratando formatos numÃ©ricos variados, especialmente o brasileiro.
# Ajusta 'Valor Unit' se a unidade for 'UN' (assumindo que vem como centavos) para refletir o custo por unidade (R$/un).
def converter_valor(valor, unidade, is_valor_unitario=False):
    valor_float_base = 0.0 # Valor base antes de qualquer ajuste especÃ­fico de unidade

    # Tenta converter o valor para float de forma segura, considerando o tipo original
    try:
        # Se o valor jÃ¡ Ã© um nÃºmero (int ou float), usa-o diretamente
        if isinstance(valor, (int, float)):
            valor_float_base = float(valor)
        else: # Se for uma string, tenta processar o formato brasileiro
            valor_str = str(valor).strip()
            # Remove pontos de milhar, depois substitui vÃ­rgula decimal por ponto
            valor_str = valor_str.replace(".", "").replace(",", ".")
            valor_float_base = float(valor_str)
    except (ValueError, TypeError):
        # Se falhar a conversÃ£o de qualquer forma, loga o erro e define como 0.0
        st.error(f"Erro grave ao converter o valor '{valor}' (tipo original: {type(valor)}) para nÃºmero. Verifique o formato na planilha. Valor definido para 0.0.")
        valor_float_base = 0.0

    # LÃ³gica de ajuste final para valores unitÃ¡rios.
    # Esta divisÃ£o por 100 Ã© aplicada APENAS se 'is_valor_unitario' for True e a 'unidade' for 'UN'.
    # Isso se baseia na depuraÃ§Ã£o anterior que mostrou que valores 'UN' chegam como inteiros (centavos).
    if is_valor_unitario and unidade == 'UN':
        return valor_float_base / 100
    
    # Para todas as outras unidades (incluindo 'KG') ou valores que nÃ£o sÃ£o unitÃ¡rios,
    # retorna o valor float base como estÃ¡.
    return valor_float_base

# --- DefiniÃ§Ã£o do Menu Principal ---
# Define o menu de navegaÃ§Ã£o para a aplicaÃ§Ã£o Streamlit usando um botÃ£o de rÃ¡dio na barra lateral.
menu = st.sidebar.radio("Menu", ["ðŸ“¥ Inserir NFC-e", "ðŸ“Š Dashboard", "ðŸ“ˆ Fluxo de Caixa", "ðŸ“¦ Estoque"])

# --- ConexÃ£o ao Google Sheets (apÃ³s a definiÃ§Ã£o do menu para garantir o fluxo adequado da aplicaÃ§Ã£o) ---
# Isso garante que o objeto 'sheet' esteja disponÃ­vel globalmente para as pÃ¡ginas da aplicaÃ§Ã£o.
sheet = conectar_google_sheets()

# --- PÃ¡ginas da AplicaÃ§Ã£o ---

# PÃ¡gina: Inserir NFC-e
if menu == "ðŸ“¥ Inserir NFC-e":
    st.title("ðŸ“¥ Inserir NFC-e")
    st.info("Funcionalidade em desenvolvimento")

# PÃ¡gina: Dashboard
elif menu == "ðŸ“Š Dashboard":
    st.title("ðŸ“Š Dashboard")
    st.info("Funcionalidade em desenvolvimento")

# PÃ¡gina: Fluxo de Caixa
elif menu == "ðŸ“ˆ Fluxo de Caixa":
    st.title("ðŸ“ˆ Fluxo de Caixa")
    
    # Armazena em cache a funÃ§Ã£o de carregamento de dados para melhorar o desempenho.
    # Os dados serÃ£o recarregados apenas se os parÃ¢metros de entrada mudarem ou apÃ³s 600 segundos (10 minutos).
    @st.cache_data(ttl=600)
    def carregar_dados():
        # ObtÃ©m todos os registros da planilha do Google Sheets.
        dados = sheet.get_all_records()
        df = pd.DataFrame(dados)
        
        # Processa 'Valor Unit' e 'Quantidade' usando a funÃ§Ã£o converter_valor.
        df['Valor Unit'] = df.apply(lambda x: converter_valor(x['Valor Unit'], x['Unid'], is_valor_unitario=True), axis=1)
        df['Quantidade'] = df.apply(lambda x: converter_valor(x['Quantidade'], x['Unid']), axis=1)
        
        # Calcula 'Valor Total' com base no valor unitÃ¡rio e quantidade processados.
        df['Valor Total'] = df['Valor Unit'] * df['Quantidade']
        
        # Converte 'Data Compra' para objetos datetime, tratando potenciais erros.
        df['Data Compra'] = pd.to_datetime(df['Data Compra'], dayfirst=True, errors='coerce').dt.date
        # Remove as linhas onde 'Data Compra' nÃ£o pÃ´de ser analisada (valores NaT).
        df = df.dropna(subset=['Data Compra'])
        
        return df

    df = carregar_dados() # Carrega os dados em um DataFrame.
    
    if not df.empty:
        # Determina as datas mÃ­nima e mÃ¡xima no conjunto de dados para filtragem por data.
        min_date = df['Data Compra'].min()
        max_date = df['Data Compra'].max()
        
        # Cria colunas para widgets de entrada de data.
        col1, col2 = st.columns(2)
        with col1:
            data_inicio = st.date_input("De", min_date, min_value=min_date, max_value=max_date)
        with col2:
            data_fim = st.date_input("AtÃ©", max_date, min_value=min_date, max_value=max_date)
        
        # Filtra o DataFrame com base no intervalo de datas selecionado.
        df_filtrado = df[(df['Data Compra'] >= data_inicio) & (df['Data Compra'] <= data_fim)]
        
        # Cria uma cÃ³pia para exibiÃ§Ã£o para evitar modificar o DataFrame original.
        df_exibir = df_filtrado.copy()
        # Aplica a formataÃ§Ã£o de moeda brasileira e quantidade para fins de exibiÃ§Ã£o.
        df_exibir['Valor Unit'] = df_exibir['Valor Unit'].apply(formatar_br)
        df_exibir['Valor Total'] = df_exibir['Valor Total'].apply(formatar_br)
        df_exibir['Quantidade'] = df_exibir['Quantidade'].apply(lambda x: formatar_br(x, is_quantidade=True))
        
        # Exibe o DataFrame filtrado e formatado usando o widget dataframe do Streamlit.
        st.dataframe(
            df_exibir.sort_values('Data Compra', ascending=False), # Ordena por data decrescente.
            column_config={
                "Data Compra": st.column_config.DateColumn("Data da Compra", format="DD/MM/YYYY"), # Personaliza a exibiÃ§Ã£o da coluna de data.
                "Unid": st.column_config.TextColumn("Unidade"), # Renomeia a coluna 'Unid'.
                "DescriÃ§Ã£o": st.column_config.TextColumn("DescriÃ§Ã£o do Item"), # Renomeia a coluna 'DescriÃ§Ã£o'.
                "Fornecedor": st.column_config.TextColumn("Fornecedor"),
                "Valor Unit": st.column_config.TextColumn("Valor UnitÃ¡rio"),
                "Valor Total": st.column_config.TextColumn("Valor Total")
            },
            hide_index=True, # Oculta o Ã­ndice do DataFrame.
            use_container_width=True # Faz o DataFrame expandir para a largura do contÃªiner.
        )
    else:
        st.warning("Nenhum dado encontrado para o perÃ­odo selecionado.")

# PÃ¡gina: GestÃ£o de Estoque
elif menu == "ðŸ“¦ Estoque":
    st.title("ðŸ“¦ GestÃ£o de Estoque")
    
    # Armazena em cache a funÃ§Ã£o de carregamento de dados do estoque.
    # Os dados serÃ£o recarregados apenas se os parÃ¢metros de entrada mudarem ou apÃ³s 3600 segundos (1 hora).
    @st.cache_data(ttl=3600)
    def carregar_estoque():
        # ObtÃ©m todos os registros da planilha do Google Shee
